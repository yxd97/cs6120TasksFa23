@main(in: int) {
.main_bb0:
  in.1: int = id in;
  ten.1: int = const 10;
  zero.1: int = const 0;
  one.1: int = const 1;
  index.1: int = const 1;
  not_finished.1: bool = const true;
.for.cond:
  d.1 = phi d.2 .if.true d.2 .if.false;
  index.2 = phi index.1 .main_bb0 index.2 .if.true index.3 .if.false;
  power.1 = phi power.2 .if.true power.2 .if.false;
  check.1 = phi check.2 .if.true check.2 .if.false;
  not_finished.2 = phi not_finished.1 .main_bb0 not_finished.3 .if.true not_finished.2 .if.false;
  br not_finished.2 .for.body .for.end;
.for.body:
  power.2: int = call @pow ten.1 index.2;
  d.2: int = div in.1 power.2;
  check.2: bool = eq d.2 zero.1;
  br check.2 .if.true .if.false;
.if.true:
  not_finished.3: bool = const false;
  jmp .for.cond;
.if.false:
  index.3: int = add index.2 one.1;
  jmp .for.cond;
.for.end:
  exp.1: int = sub index.2 one.1;
  is_palindrome.1: bool = call @palindrome in.1 exp.1;
  print is_palindrome.1;
}

@pow(base: int, exp: int): int {
.pow_bb0:
  exp.1: int = id exp;
  base.1: int = id base;
  res.1: int = const 1;
  zero.1: int = const 0;
  one.1: int = const 1;
  not_finished.1: bool = const true;
.for.cond.pow:
  exp.2 = phi exp.1 .pow_bb0 exp.2 .if.true.pow exp.3 .if.false.pow;
  finished.1 = phi finished.2 .if.true.pow finished.2 .if.false.pow;
  res.2 = phi res.1 .pow_bb0 res.2 .if.true.pow res.3 .if.false.pow;
  not_finished.2 = phi not_finished.1 .pow_bb0 not_finished.3 .if.true.pow not_finished.2 .if.false.pow;
  br not_finished.2 .for.body.pow .for.end.pow;
.for.body.pow:
  finished.2: bool = eq exp.2 zero.1;
  br finished.2 .if.true.pow .if.false.pow;
.if.true.pow:
  not_finished.3: bool = const false;
  jmp .for.cond.pow;
.if.false.pow:
  res.3: int = mul res.2 base.1;
  exp.3: int = sub exp.2 one.1;
  jmp .for.cond.pow;
.for.end.pow:
  ret res.2;
}

@palindrome(in: int, len: int): bool {
.palindrome_bb0:
  len.1: int = id len;
  in.1: int = id in;
  is_palindrome.1: bool = const false;
  zero.1: int = const 0;
  two.1: int = const 2;
  ten.1: int = const 10;
  check.1: bool = le len.1 zero.1;
  br check.1 .if.true.palindrome .if.false.palindrome;
.if.true.palindrome:
  is_palindrome.2: bool = const true;
  jmp .if.end.palindrome;
.if.false.palindrome:
  power.2: int = call @pow ten.1 len.1;
  left.2: int = div in.1 power.2;
  v1.2: int = div in.1 ten.1;
  v2.2: int = mul v1.2 ten.1;
  right.2: int = sub in.1 v2.2;
  is_equal.2: bool = eq left.2 right.2;
  br is_equal.2 .if.true.mirror .if.false.mirror;
.if.true.mirror:
  temp.2: int = mul power.2 left.2;
  temp.3: int = sub in.1 temp.2;
  temp.4: int = sub temp.3 right.2;
  next_in.2: int = div temp.4 ten.1;
  next_len.2: int = sub len.1 two.1;
  is_palindrome.4: bool = call @palindrome next_in.2 next_len.2;
  jmp .if.end.palindrome;
.if.false.mirror:
  is_palindrome.5: bool = const false;
  jmp .if.end.palindrome;
.if.end.palindrome:
  right.1 = phi right.2 .if.true.mirror right.2 .if.false.mirror;
  v2.1 = phi v2.2 .if.true.mirror v2.2 .if.false.mirror;
  next_in.1 = phi next_in.2 .if.true.mirror;
  temp.1 = phi temp.4 .if.true.mirror;
  left.1 = phi left.2 .if.true.mirror left.2 .if.false.mirror;
  is_palindrome.3 = phi is_palindrome.2 .if.true.palindrome is_palindrome.4 .if.true.mirror is_palindrome.5 .if.false.mirror;
  is_equal.1 = phi is_equal.2 .if.true.mirror is_equal.2 .if.false.mirror;
  v1.1 = phi v1.2 .if.true.mirror v1.2 .if.false.mirror;
  power.1 = phi power.2 .if.true.mirror power.2 .if.false.mirror;
  next_len.1 = phi next_len.2 .if.true.mirror;
  ret is_palindrome.3;
}

