@main(n: int) {
.ENTRY:
.main_bb0:
  v2.1: int = const 1;
  i.1: int = id v2.1;
.for.cond.1:
  v13.1 = phi v13.NOT_DEFINED .main_bb0 v13.2 .endif.7;
  v10.1 = phi v10.NOT_DEFINED .main_bb0 v10.3 .endif.7;
  v9.1 = phi v9.NOT_DEFINED .main_bb0 v9.3 .endif.7;
  v8.1 = phi v8.NOT_DEFINED .main_bb0 v8.2 .endif.7;
  v12.1 = phi v12.NOT_DEFINED .main_bb0 v12.3 .endif.7;
  isPrime.1 = phi isPrime.NOT_DEFINED .main_bb0 isPrime.3 .endif.7;
  v15.1 = phi v15.NOT_DEFINED .main_bb0 v15.2 .endif.7;
  v6.1 = phi v6.NOT_DEFINED .main_bb0 v6.2 .endif.7;
  v11.1 = phi v11.NOT_DEFINED .main_bb0 v11.3 .endif.7;
  i.2 = phi i.1 .main_bb0 i.3 .endif.7;
  v14.1 = phi v14.NOT_DEFINED .main_bb0 v14.2 .endif.7;
  v3.1: int = id i.2;
  v4.1: int = id n;
  v5.1: bool = lt v3.1 v4.1;
  br v5.1 .for.body.1 .for.end.1;
.for.body.1:
  v6.2: int = id i.2;
  isPrime.2: bool = call @checkPrime v6.2;
  isPrime.3: bool = id isPrime.2;
  v8.2: bool = id isPrime.3;
  br v8.2 .then.7 .else.7;
.then.7:
  v9.2: int = const 1;
  print v9.2;
  v10.2: int = const 0;
  jmp .endif.7;
.else.7:
  v11.2: int = const 0;
  print v11.2;
  v12.2: int = const 0;
.endif.7:
  v10.3 = phi v10.2 .then.7 v10.1 .else.7;
  v9.3 = phi v9.2 .then.7 v9.1 .else.7;
  v12.3 = phi v12.1 .then.7 v12.2 .else.7;
  v11.3 = phi v11.1 .then.7 v11.2 .else.7;
  v13.2: int = id i.2;
  v14.2: int = const 1;
  v15.2: int = add v13.2 v14.2;
  i.3: int = id v15.2;
  jmp .for.cond.1;
.for.end.1:
}

@checkPrime(x: int): bool {
.ENTRY:
.checkPrime_bb0:
  v1.1: int = id x;
  v2.1: int = const 1;
  v3.1: bool = le v1.1 v2.1;
  br v3.1 .then.0 .else.0;
.then.0:
  v4.1: bool = const false;
  ret v4.1;
.else.0:
.endif.0:
  v6.1: int = const 2;
  i.1: int = id v6.1;
.for.cond.5:
  v23.1 = phi v23.NOT_DEFINED .endif.0 v23.2 .endif.18;
  v12.1 = phi v12.NOT_DEFINED .endif.0 v12.2 .endif.18;
  v21.1 = phi v21.NOT_DEFINED .endif.0 v21.2 .endif.18;
  v13.1 = phi v13.NOT_DEFINED .endif.0 v13.2 .endif.18;
  v17.1 = phi v17.NOT_DEFINED .endif.0 v17.2 .endif.18;
  v19.1 = phi v19.NOT_DEFINED .endif.0 v19.2 .endif.18;
  div.1 = phi div.NOT_DEFINED .endif.0 div.2 .endif.18;
  isDivisible.1 = phi isDivisible.NOT_DEFINED .endif.0 isDivisible.2 .endif.18;
  v10.1 = phi v10.NOT_DEFINED .endif.0 v10.2 .endif.18;
  v16.1 = phi v16.NOT_DEFINED .endif.0 v16.2 .endif.18;
  v15.1 = phi v15.NOT_DEFINED .endif.0 v15.2 .endif.18;
  v22.1 = phi v22.NOT_DEFINED .endif.0 v22.2 .endif.18;
  v11.1 = phi v11.NOT_DEFINED .endif.0 v11.2 .endif.18;
  i.2 = phi i.1 .endif.0 i.3 .endif.18;
  v14.1 = phi v14.NOT_DEFINED .endif.0 v14.2 .endif.18;
  v7.1: int = id i.2;
  v8.1: int = id x;
  v9.1: bool = lt v7.1 v8.1;
  br v9.1 .for.body.5 .for.end.5;
.for.body.5:
  v10.2: int = id x;
  v11.2: int = id i.2;
  v12.2: int = div v10.2 v11.2;
  div.2: int = id v12.2;
  v13.2: int = id div.2;
  v14.2: int = id i.2;
  v15.2: int = mul v13.2 v14.2;
  v16.2: int = id x;
  v17.2: bool = eq v15.2 v16.2;
  isDivisible.2: bool = id v17.2;
  v19.2: bool = id isDivisible.2;
  br v19.2 .then.18 .else.18;
.then.18:
  v20.1: bool = const false;
  ret v20.1;
.else.18:
.endif.18:
  v21.2: int = id i.2;
  v22.2: int = const 1;
  v23.2: int = add v21.2 v22.2;
  i.3: int = id v23.2;
  jmp .for.cond.5;
.for.end.5:
  v24.1: bool = const true;
  ret v24.1;
}

