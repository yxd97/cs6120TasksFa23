@pow(x: int, n: int): int {
.ENTRY:
.ENTRY:
.pow_bb0:
  v1.1: int = id n;
  v2.1: int = const 1;
  v3.1: bool = eq v1.1 v2.1;
  br v3.1 .then.0 .else.0;
.then.0:
  v4.1: int = id x;
  ret v4.1;
  jmp .endif.0;
.else.0:
  v5.1: int = id x;
  v6.1: int = id n;
  v7.1: int = const 2;
  v8.1: int = div v6.1 v7.1;
  half.1: int = call @pow v5.1 v8.1;
  half.2: int = id half.1;
  v9.1: int = id half.2;
  v10.1: int = id half.2;
  v11.1: int = mul v9.1 v10.1;
  half2.1: int = id v11.1;
  v13.1: int = id n;
  v14.1: int = const 2;
  v15.1: int = call @mod v13.1 v14.1;
  v16.1: int = const 1;
  v17.1: bool = eq v15.1 v16.1;
  br v17.1 .then.12 .else.12;
.then.12:
  v18.1: int = id half2.1;
  v19.1: int = id x;
  v20.1: int = mul v18.1 v19.1;
  ans.1: int = id v20.1;
  v19.2 = id v19.1;
  v18.2 = id v18.1;
  v20.2 = id v20.1;
  ans.3 = id ans.1;
  jmp .endif.12;
.else.12:
  v21.1: int = id half2.1;
  ans.2: int = id v21.1;
  v21.2 = id v21.1;
  ans.3 = id ans.2;
.endif.12:
  v22.1: int = id ans.3;
  ret v22.1;
.endif.0:
}

@mod(a: int, b: int): int {
.ENTRY:
.ENTRY:
.mod_bb0:
  v0.1: int = id a;
  v1.1: int = id a;
  v2.1: int = id b;
  v3.1: int = div v1.1 v2.1;
  v4.1: int = id b;
  v5.1: int = mul v3.1 v4.1;
  v6.1: int = sub v0.1 v5.1;
  ret v6.1;
}

@LEFTSHIFT(x: int, step: int): int {
.ENTRY:
.ENTRY:
.LEFTSHIFT_bb0:
  v0.1: int = const 2;
  v1.1: int = id step;
  p.1: int = call @pow v0.1 v1.1;
  p.2: int = id p.1;
  v2.1: int = id x;
  v3.1: int = id p.2;
  v4.1: int = mul v2.1 v3.1;
  ret v4.1;
}

@RIGHTSHIFT(x: int, step: int): int {
.ENTRY:
.ENTRY:
.RIGHTSHIFT_bb0:
  v0.1: int = const 2;
  v1.1: int = id step;
  p.1: int = call @pow v0.1 v1.1;
  p.2: int = id p.1;
  v2.1: int = id x;
  v3.1: int = id p.2;
  v4.1: int = div v2.1 v3.1;
  ret v4.1;
}

@main(a: int, b: int, c: int, d: int) {
.ENTRY:
.ENTRY:
.main_bb0:
  v2.1: int = id a;
  v3.1: int = id b;
  ans1.1: int = call @LEFTSHIFT v2.1 v3.1;
  print ans1.1;
  v4.1: int = id c;
  v5.1: int = id d;
  ans2.1: int = call @RIGHTSHIFT v4.1 v5.1;
  print ans2.1;
}

