@abs(a: int): int {
.ENTRY:
.abs_bb0:
  zero.1: int = const 0;
  is_neg.1: bool = lt a zero.1;
  br is_neg.1 .mul_neg_one .abs_res;
.mul_neg_one:
  neg_one.1: int = const -1;
  a.1: int = mul a neg_one.1;
.abs_res:
  a.2 = phi a .abs_bb0 a.1 .mul_neg_one;
  neg_one.2 = phi neg_one.NOT_DEFINED .abs_bb0 neg_one.1 .mul_neg_one;
  ret a.2;
}

@mod(a: int, b: int): int {
.ENTRY:
.mod_bb0:
  q.1: int = div a b;
  aq.1: int = mul b q.1;
  mod.1: int = sub a aq.1;
  ret mod.1;
}

@gcd(a: int, b: int): int {
.ENTRY:
.while.cond:
  b.1 = phi b .ENTRY b.2 .while.body;
  a.1 = phi a .ENTRY a.2 .while.body;
  mod.1: int = call @mod a.1 b.1;
  zero.1: int = const 0;
  is_term.1: bool = eq mod.1 zero.1;
  br is_term.1 .while.finish .while.body;
.while.body:
  a.2: int = id b.1;
  b.2: int = id mod.1;
  jmp .while.cond;
.while.finish:
  ret b.1;
}

@lcm(a: int, b: int): int {
.ENTRY:
.lcm_bb0:
  zero.1: int = const 0;
  a_is_zero.1: bool = eq a zero.1;
  br a_is_zero.1 .check_b .is_good;
.check_b:
  b_is_zero.2: bool = eq b zero.1;
  br b_is_zero.2 .special_case .is_good;
.special_case:
  ret zero.1;
.is_good:
  b_is_zero.1 = phi b_is_zero.NOT_DEFINED .lcm_bb0 b_is_zero.2 .check_b;
  ab.1: int = mul a b;
  ab.2: int = call @abs ab.1;
  gcdab.1: int = call @gcd a b;
  lcm.1: int = div ab.2 gcdab.1;
  ret lcm.1;
}

@orders(u: int, n: int, use_lcm: bool) {
.ENTRY:
.for.cond:
  lcm.1 = phi lcm.NOT_DEFINED .ENTRY lcm.3 .for.body.print;
  u.1 = phi u .ENTRY u.2 .for.body.print;
  gcdun.1 = phi gcdun.NOT_DEFINED .ENTRY gcdun.3 .for.body.print;
  one.1 = phi one.NOT_DEFINED .ENTRY one.2 .for.body.print;
  ordu.1 = phi ordu.NOT_DEFINED .ENTRY ordu.4 .for.body.print;
  is_term.1: bool = eq u.1 n;
  br is_term.1 .for.finish .for.body;
.for.body:
  br use_lcm .lcm .gcd;
.lcm:
  lcm.2: int = call @lcm u.1 n;
  ordu.2: int = div lcm.2 u.1;
  jmp .for.body.print;
.gcd:
  gcdun.2: int = call @gcd u.1 n;
  ordu.3: int = div n gcdun.2;
.for.body.print:
  lcm.3 = phi lcm.2 .lcm lcm.1 .gcd;
  gcdun.3 = phi gcdun.1 .lcm gcdun.2 .gcd;
  ordu.4 = phi ordu.2 .lcm ordu.3 .gcd;
  print u.1 ordu.4;
  one.2: int = const 1;
  u.2: int = add u.1 one.2;
  jmp .for.cond;
.for.finish:
  ret;
}

@main(n: int, use_lcm: bool) {
.ENTRY:
.main_bb0:
  zero.1: int = const 0;
  u.1: int = const 1;
  n.1: int = call @abs n;
  print zero.1 u.1;
  call @orders u.1 n.1 use_lcm;
}

