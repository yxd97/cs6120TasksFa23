@main(input: int) {
.main_bb0:
  input.1: int = id input;
  zero.1: int = const 0;
  ten.1: int = const 10;
  result.1: int = const 0;
.begin:
  r0.1 = phi r0.2 .check_done;
  result.2 = phi result.1 .main_bb0 result.4 .check_done;
  processed.1 = phi processed.2 .check_done;
  done.1 = phi done.2 .check_done;
  digit.1: int = call @peel_last_digit input.1;
  input.2: int = div input.1 ten.1;
  result.3: int = add result.2 digit.1;
.check_result:
  r0.2 = phi r0.3 .process_result;
  result.4 = phi result.3 .begin result.6 .process_result;
  print result.4;
  processed.2: bool = call @is_single_digit result.4;
  br processed.2 .check_done .process_result;
.process_result:
  r0.3: int = call @peel_last_digit result.4;
  result.5: int = div result.4 ten.1;
  result.6: int = add result.5 r0.3;
  jmp .check_result;
.check_done:
  done.2: bool = eq input.2 zero.1;
  br done.2 .done .begin;
.done:
  print result.4;
}

@is_single_digit(input: int): bool {
.is_single_digit_bb0:
  input.1: int = id input;
  ten.1: int = const 10;
  zero.1: int = const 0;
  divided.1: int = div input.1 ten.1;
  mul_by_ten.1: int = mul divided.1 ten.1;
  result.1: bool = eq mul_by_ten.1 zero.1;
  ret result.1;
}

@peel_last_digit(input: int): int {
.peel_last_digit_bb0:
  input.1: int = id input;
  ten.1: int = const 10;
  div_by_ten.1: int = div input.1 ten.1;
  mul_by_ten.1: int = mul div_by_ten.1 ten.1;
  last_digit.1: int = sub input.1 mul_by_ten.1;
  ret last_digit.1;
}

